(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     67745,       1411]
NotebookOptionsPosition[     66423,       1363]
NotebookOutlinePosition[     66763,       1378]
CellTagsIndexPosition[     66720,       1375]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Quit", "[", "]"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.568357405267046*^9, 3.568357406008952*^9}, {
  3.7511703901331882`*^9, 3.751170391330839*^9}, {3.7511705918706713`*^9, 
  3.751170599668685*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{
  3.35696210375764*^9, {3.4360973832994432`*^9, 3.4360973850806704`*^9}, {
   3.560427187328125*^9, 3.560427203609375*^9}},
 CellID->156084050],

Cell[BoxData["\<\"/home/jam/Kuweta/RandFile/examples\"\>"], "Output",
 CellChangeTimes->{{3.56042725878125*^9, 3.5604272589375*^9}, 
   3.564717951453125*^9, 3.5683573296132603`*^9, {3.568357400180122*^9, 
   3.5683574100721893`*^9}, 3.568357896397246*^9, {3.5683580552982693`*^9, 
   3.568358064606804*^9}, 3.56835825259249*^9, 3.568358303654092*^9, 
   3.568358453451373*^9, 3.568358867787079*^9, 3.568358947245552*^9, 
   3.568359047789935*^9, 3.568359141190391*^9, 3.5683593916150913`*^9, 
   3.568359507724703*^9, 3.568359783110956*^9, 3.568360084144546*^9, 
   3.570863750528164*^9, 3.5708651878607597`*^9, 3.57086529533724*^9, 
   3.570865756484385*^9, 3.57086606486583*^9, 3.751170394233885*^9, 
   3.751170475550764*^9, {3.751170589174974*^9, 3.751170601287829*^9}, 
   3.7511725885790854`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<RandFile.m\>\"", "]"}]], "Input",
 CellChangeTimes->{
  3.5604272341875*^9, {3.568357331288638*^9, 3.568357332042822*^9}, {
   3.7511705046556053`*^9, 3.751170541101365*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Package RandFile version \"\>", 
   "\[InvisibleSpace]", "\<\"0.1.3\"\>", 
   "\[InvisibleSpace]", "\<\" (last modification: \"\>", 
   "\[InvisibleSpace]", "\<\"26/08/2015\"\>", 
   "\[InvisibleSpace]", "\<\").\"\>"}],
  SequenceForm[
  "Package RandFile version ", "0.1.3", " (last modification: ", "26/08/2015",
    ")."],
  Editable->False]], "Print",
 CellChangeTimes->{3.7511706030153646`*^9, 3.7511725887867203`*^9}],

Cell[BoxData["\<\"Usage notes:\"\>"], "Print",
 CellChangeTimes->{3.7511706030153646`*^9, 3.751172588787437*^9}],

Cell[BoxData["\<\"1) Almost all provided functions require to set a global \
variable pointing to file with random data! This can be done by using \
\\!\\(\\*\\nStyleBox[\\\"SetTrueRandomDataFile\\\",\\nFontWeight->\\\"Bold\\\"\
]\\) function. For example \
\\!\\(\\*\\nStyleBox[\\\"SetTrueRandomDataFile\\\",\\nFontWeight->\\\"Bold\\\"\
]\\)[\\\"/home/user_name/data/sample_file.bin\\\"] for GNU/Linux systems or \
\\!\\(\\*StyleBox[\\\"SetTrueRandomDataFile\\\",\\nFontWeight->\\\"Bold\\\"]\\\
)[\\\"/Users/user_name/data/sample_file.bin\\\"] for OS X systems. Please \
mind that it is advised to use this function only once during the \
session.\"\>"], "Print",
 CellChangeTimes->{3.7511706030153646`*^9, 3.751172588788838*^9}],

Cell[BoxData["\<\"2) If you intend to use \
\\!\\(\\*\\nStyleBox[\\\"TrueRandomSequence\\\",\\nFontWeight->\\\"Bold\\\"]\\\
) function you must use \
\\!\\(\\*\\nStyleBox[\\\"SetMaxTrueRandomSequenceLength\\\",\\nFontWeight->\\\
\"Bold\\\"]\\) and declare at least one sequence. Currently declared \
sequences can be displayed by calling \
\\!\\(\\*\\nStyleBox[\\\"GetTrueRandomDataMarkers\\\",\\nFontWeight->\\\"Bold\
\\\"]\\)[]. Once defined, the used maximal length cannot be changed during \
the session.\"\>"], "Print",
 CellChangeTimes->{3.7511706030153646`*^9, 3.751172588789901*^9}]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"intensity", "[", 
    RowBox[{"tetha_", ",", "Amp_", ",", "k_", ",", "d_", ",", "a_"}], "]"}], ":=", 
   RowBox[{"Amp", "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"0.5", " ", "k", " ", "a", "*", " ", 
          RowBox[{"Sin", "[", "tetha", "]"}]}], "]"}], "/", 
        RowBox[{"(", 
         RowBox[{"0.5", " ", "k", " ", "a", "*", " ", 
          RowBox[{"Sin", "[", "tetha", "]"}]}], ")"}]}], ")"}], "^", "2"}], 
     ")"}], "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Cos", "[", 
        RowBox[{"0.5", " ", "k", " ", "d", " ", "*", 
         RowBox[{"Sin", "[", "tetha", "]"}]}], "]"}], ")"}], "^", "2"}], 
     ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{3.570865336364724*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"myLambda", "=", 
   RowBox[{"680", "*", 
    RowBox[{"10", "^", 
     RowBox[{"-", "6"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myA", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myD", "=", "5"}], ";"}]}], "Input",
 CellChangeTimes->{{3.5708658544687023`*^9, 3.570865877421986*^9}, {
  3.570865916775326*^9, 3.5708659176370373`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"calcDisp", "[", "dataFile_String", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"M", "=", "101"}], ",", 
       RowBox[{"t", "=", "10"}], ",", 
       RowBox[{"d", "=", "myD"}], ",", 
       RowBox[{"a", "=", "myA"}], ",", 
       RowBox[{"lambda", "=", "myLambda"}], ",", "maxangle", ",", 
       "detectorsize", ",", "pprev", ",", "p", ",", "k", ",", "n", ",", "S", 
       ",", "q", ",", "phase", ",", "path", ",", "alfa", ",", "beta", ",", 
       "tetha", ",", "gamma", ",", "source", ",", "position", ",", "angle", 
       ",", "temp1", ",", "temp2", ",", "temp3", ",", "temp4", ",", "temp5", 
       ",", "Disp"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetTrueRandomDataFile", "[", "dataFile", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"d", "<", 
         RowBox[{"a", "+", "0.5"}]}], ",", 
        RowBox[{"d", "=", 
         RowBox[{"a", "+", "0.5"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxangle", "=", 
       RowBox[{"90", 
        RowBox[{"Pi", "/", "180"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"detectorsize", "=", 
       RowBox[{"Pi", "/", "M"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"p", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", "M", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pprev", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", "M", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"S", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"N", "[", 
            RowBox[{
             RowBox[{"180", "/", "Pi"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"-", "Pi"}], "/", "2"}], "+", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"i", "-", "0.5"}], ")"}], "*", "detectorsize"}]}], 
              ")"}]}], "]"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "M"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Disp", "=", "S"}], ";", "\[IndentingNewLine]", 
      RowBox[{"gamma", "=", 
       RowBox[{"Table", "[", 
        RowBox[{"0.05", ",", 
         RowBox[{"{", "M", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"q", " ", "=", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"TrueRandomReal", "[", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
         RowBox[{"{", "M", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"n", "=", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alfa", "=", "0.999"}], ";", "\[IndentingNewLine]", 
      RowBox[{"beta", "=", "0.9"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"source", "=", 
          RowBox[{"TrueRandomInteger", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"position", "=", 
          RowBox[{"TrueRandomReal", "[", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"a", "*", "lambda"}]}], "}"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"angle", "=", 
          RowBox[{"TrueRandomReal", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "maxangle"}], ",", "maxangle"}], "}"}], "]"}]}], 
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"y", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"-", "1"}], ")"}], "^", 
            RowBox[{"(", 
             RowBox[{"source", "+", "1"}], ")"}]}], 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"d", "-", "a"}], ")"}], "/", "2"}], "*", "lambda"}], 
             "+", "position"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"temp1", "=", "y"}], ";", "\[IndentingNewLine]", 
         RowBox[{"temp2", "=", 
          RowBox[{"temp1", "*", "temp1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"temp3", "=", 
          RowBox[{"Sin", "[", "angle", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"temp4", "=", 
          RowBox[{
           RowBox[{"Cos", "[", "angle", "]"}], "^", "2"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"temp5", "=", 
          RowBox[{
           RowBox[{"temp1", "*", "temp4"}], "+", 
           RowBox[{"temp3", "*", 
            RowBox[{"Sqrt", "[", 
             RowBox[{"1", "-", 
              RowBox[{"temp2", "*", "temp4"}]}], "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"tetha", "=", 
          RowBox[{"ArcSin", "[", "temp5", "]"}]}], ";", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"k", "=", 
          RowBox[{"Ceiling", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"tetha", "+", 
              RowBox[{"Pi", "/", "2"}]}], ")"}], "/", "detectorsize"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"path", "=", 
          RowBox[{"Sqrt", "[", 
           RowBox[{"1", "-", 
            RowBox[{"2", "*", "temp1", "*", "temp5"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"phase", "=", 
          RowBox[{"2", " ", "Pi", " ", 
           RowBox[{"path", "/", "lambda"}]}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"n", "=", 
          RowBox[{"n", "+", "1"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"pprev", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "=", 
          RowBox[{"p", "[", 
           RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "[", 
           RowBox[{"[", 
            RowBox[{"k", ",", "1"}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{
            RowBox[{"gamma", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "*", 
            RowBox[{"p", "[", 
             RowBox[{"[", 
              RowBox[{"k", ",", "1"}], "]"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"gamma", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], "*", 
            RowBox[{"Cos", "[", "phase", "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"p", "[", 
           RowBox[{"[", 
            RowBox[{"k", ",", "2"}], "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{
            RowBox[{"gamma", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "*", 
            RowBox[{"p", "[", 
             RowBox[{"[", 
              RowBox[{"k", ",", "2"}], "]"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"gamma", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], "*", 
            RowBox[{"Sin", "[", "phase", "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"q", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "=", 
          RowBox[{
           RowBox[{"beta", "*", 
            RowBox[{"q", "[", 
             RowBox[{"[", "k", "]"}], "]"}]}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"1", "-", "beta"}], " ", ")"}], "0.5", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"p", "[", 
                  RowBox[{"[", 
                   RowBox[{"k", ",", "1"}], "]"}], "]"}], "-", 
                 RowBox[{"pprev", "[", 
                  RowBox[{"[", 
                   RowBox[{"k", ",", "1"}], "]"}], "]"}]}], ")"}], "^", "2"}],
               "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"p", "[", 
                  RowBox[{"[", 
                   RowBox[{"k", ",", "2"}], "]"}], "]"}], "-", 
                 RowBox[{"pprev", "[", 
                  RowBox[{"[", 
                   RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ")"}], "^", 
               "2"}]}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"gamma", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "=", 
          RowBox[{"alfa", "*", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"q", "[", 
              RowBox[{"[", "k", "]"}], "]"}]}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"p", "[", 
               RowBox[{"[", 
                RowBox[{"k", ",", "1"}], "]"}], "]"}], "^", "2"}], "+", 
             RowBox[{
              RowBox[{"p", "[", 
               RowBox[{"[", 
                RowBox[{"k", ",", "2"}], "]"}], "]"}], "^", "2"}]}], 
            "\[GreaterEqual]", 
            RowBox[{"TrueRandomReal", "[", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"S", "[", 
              RowBox[{"[", 
               RowBox[{"k", ",", "2"}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"S", "[", 
               RowBox[{"[", 
                RowBox[{"k", ",", "2"}], "]"}], "]"}], "+", "1"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Disp", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"S", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], "/", 
              RowBox[{"Max", "[", 
               RowBox[{"S", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}]}]}]}], 
          "\[IndentingNewLine]", "]"}], ";"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "0", ",", "150000"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"CloseTrueRandomDataFile", "[", "]"}], ";", 
      "\[IndentingNewLine]", "Disp"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.570865257977078*^9, 3.570865272093539*^9}, {
   3.570865340622675*^9, 3.5708653952194138`*^9}, {3.570865452199581*^9, 
   3.5708657413161697`*^9}, 3.570865842426841*^9, {3.570865879583981*^9, 
   3.570865904274482*^9}, 3.5708659677454348`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", "7"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"disp", "[", "i", "]"}], "=", 
     RowBox[{"calcDisp", "[", 
      RowBox[{"\"\<dseSample\>\"", "<>", 
       RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.bin\>\""}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"Export", "[", 
     RowBox[{
      RowBox[{"\"\<resDSESample\>\"", "<>", 
       RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.dat\>\""}], ",", 
      RowBox[{"disp", "[", "i", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7511724242981033`*^9, 3.75117255383694*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Using file \\\"dseSample1.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.751172598102098*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample2.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.751172627762527*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample3.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.751172657006948*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample4.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.751172686575988*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample5.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.7511727159912567`*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample6.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.7511727472785273`*^9}],

Cell[BoxData["\<\"Using file \\\"dseSample7.bin\\\" which contains 2097152 \
bytes of data.\"\>"], "Print",
 CellChangeTimes->{3.7511727764047747`*^9}]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", "7"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"plotDESlist", " ", "[", "i", "]"}], "=", " ", 
    RowBox[{"ListPlot", "[", 
     RowBox[{
      RowBox[{"disp", "[", "i", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"AxesOrigin", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "90"}], ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "0.01"}], ",", "1.02"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"FontFamily", "\[Rule]", "\"\<Latin Modern Roman\>\""}], ",", 
         RowBox[{"FontSize", "\[Rule]", "16"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotMarkers", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Automatic", ",", "6"}], "}"}]}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"Frame", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"True", ",", "False"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"FrameLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\[Theta]", ",", "\"\<relative intensity\>\""}], "}"}]}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"FrameTicks", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Automatic", ",", "None"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "90"}], ",", 
               RowBox[{
                RowBox[{"-", "\[Pi]"}], "/", "2"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "45"}], ",", 
               RowBox[{
                RowBox[{"-", "\[Pi]"}], "/", "4"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"45", ",", 
               RowBox[{"\[Pi]", "/", "2"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"90", ",", 
               RowBox[{"\[Pi]", "/", "2"}]}], "}"}]}], "}"}], ",", "None"}], 
          "}"}]}], "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.751172621771158*^9, 3.751172632638604*^9}, {
  3.7511733874241858`*^9, 3.751173409095066*^9}, {3.7511734889338217`*^9, 
  3.7511735426022873`*^9}, {3.751173595469161*^9, 3.751173595527999*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plotDEStheor", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"intensity", "[", 
     RowBox[{
      RowBox[{"x", " ", 
       RowBox[{"Pi", "/", "180"}]}], ",", "1", ",", 
      RowBox[{"(", 
       RowBox[{"2", 
        RowBox[{"Pi", "/", "myLambda"}]}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{"myD", "*", "myLambda"}], ")"}], ",", 
      RowBox[{"myA", "*", "myLambda"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AxesOrigin", " ", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "90"}], ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "90"}], ",", "90"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1.02"}], "}"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"Black", ",", 
       RowBox[{"Thickness", "[", "0.002", "]"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BaseStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"FontFamily", "\[Rule]", "\"\<Latin Modern Roman\>\""}], ",", 
       RowBox[{"FontSize", "\[Rule]", "16"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"BaseStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Times\>\"", ",", "12"}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Frame", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "\"\<relative intensity\>\""}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FrameTicks", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Automatic", ",", "None"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "90"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Pi]"}], "/", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "45"}], ",", 
             RowBox[{
              RowBox[{"-", "\[Pi]"}], "/", "4"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"45", ",", 
             RowBox[{"\[Pi]", "/", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"90", ",", 
             RowBox[{"\[Pi]", "/", "2"}]}], "}"}]}], "}"}], ",", "None"}], 
        "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7511708258165607`*^9, 3.751170841652895*^9}, {
  3.751171012326681*^9, 3.751171088390321*^9}, {3.751171131615348*^9, 
  3.751171194287051*^9}, {3.751171410582673*^9, 3.7511714183580027`*^9}, {
  3.751171472226143*^9, 3.751171491063567*^9}, {3.751171551648493*^9, 
  3.751171563392906*^9}, {3.7511716660801973`*^9, 3.751171708629066*^9}, {
  3.751171811004457*^9, 3.7511718201369743`*^9}, {3.751171869472846*^9, 
  3.751171920667491*^9}, {3.7511719915102873`*^9, 3.7511720327092037`*^9}, {
  3.751173192649171*^9, 3.7511731927254143`*^9}, {3.751173247828671*^9, 
  3.751173377683425*^9}, {3.751173412408127*^9, 3.751173412460903*^9}, {
  3.7511734653969917`*^9, 3.7511734736243753`*^9}, {3.7511735981335497`*^9, 
  3.7511735981848803`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {GrayLevel[0], Thickness[0.002], Opacity[1.], LineBox[CompressedData["
1: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
1iOQf6xyyWtED7k5fhs/SHq85a/5aYL1erh/h0AFsaYApG+0ntxRpYeGsdXP
m3sKwTF8WvZ7qR4yzgSN8iwWAfrvq+/M1kOFwi8HznCXQtSJ+KkrkXp45mXu
FM/FMuA9HCA7bK6HFqJxiUsxlWAil/K92UAPrTimmqw0qiBQsqLuKeih/468
a9rzVTAusGoVraCHXYLprsEGNfCEwcVXjUsPP56xyDrK8RLU3hvXJX/QRV8a
weIFjwawu8xnZXNWFz9e4rbRU24Fy22f1nJP6uL++NpJleRWMIhrifnloIu3
XlbUHP3RCkp5Pj1ZZrrYrBHVsFjeBuxDXRaf5HRxZGGhhSTSDkynclZ1Jbbe
x9Dq0YB2oPkccCdlny6+DOQOZetvh1UmqW7Cbl0UffNaSTCwY8tPr5rf/qSD
ixL2wb9qO6Hhld3K+LwOWsg4cHQxdUGV1aHbShM6mHFT61StdRc8dv/QOdKn
g3fT7s6XjHfB/W9lnofaddD7guhcglg3JIdGs1xr1MGDiW+NyG7dEJ6qYiZd
roP//kVYy051wxWxXctBBToYU+FdIr6vBy6UTt3se6iD/rw3J+qoPeDcFtvh
n6iD61/Pu6ZgD9iST5/tvKWDbt9Ib2s+94DFuNZO4QgdrGkYPSTK1gtaG4sm
rb46GGRlsVF6pBeUwhsW+b10MDb9W+iyeS/IsqXe8HLbivuoSzYd7wXRDC/p
RicdpDALHT50vhf4pfTbuWx10N7HQ1wmpBfYKwQ8zljqYH9SQvXTW73ARPyy
46WhDjqblcy9TO2Ffx1teWxEHYyStJk1edgLP2wfGLuq6eA5kwuy5MJeWJny
XaiU38IDij7vynth2tsseucBHdzh8qKyvboXPvwWOXB8vw7Wjaxrytf1wpvr
P9vK+HRQ/jzlNl1DL7Tv6XXfzrHFf8vFQEJjLzQ+yGWyZ9bBNv5+qYmteLVM
0JMiOh0cy3PZnKvvhdJKGyPa39qY8lGi3Kq2Fx7rSs+Tv2rj0vNSa77KXrjf
QxP1ZEkbr83fUyaW9kKSw4DknyltnODfxvTqcS/cmitqtfygjaf7371+eK8X
rvmEn374Vhvnzkv3jsb1QsA/e8b1Tm2c7LrZcjG8Fy7cVHhs0qyNIxPipad8
e+EMD5Ph/ZfaKEW3Mv/UtRecH47Ofn6mjR1y5RL21r1gd+hZpH6xNm5blg04
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
T8dXtnYadotVbW1JFMKP71O2FKRNg2Aye9DNaiHk39NfGnV7GpT4HH/oDAvh
VbYSxx7XaTB4WORAvy6ErewWdeG602DFwdRXyyOMHtZbb5TxbeD/O1am11SF
MeT2vP75hSm4si2nDk8K45Boyv36+imIurpZZT1QGPmkRapLo6cg6a95TsUD
YTx5kI7PwWYKmn4sP1TpEUarZ/5Ju6cmoe+sIcufBWGcOSXgR2RMwsx/T0KL
OEQw+uibitNnJ4H1k4anHFkEX5qGB4z2f4PjVbe1JNtEUMKKKXr3ywmY8LFn
tp4Swfz/mGHQdAL8hFS6IxhFcX9cb4f9yjjE3J04NaklioKsB4+t643DOyuN
4KQKUezS6+nm6hwDgz9Ludw5YniRYveBLXYEPmd2BOi3i+Eh1k/xhMgInLFN
hoBpMbzyUsWhunwYbjSatX8UEscvp0svuNUNQV1s1rf7z8VxVa1TLNe8H9Rk
7Pm2RUlgb1s5154bH6Htq/K4/GsJ3K1/XMP3zQewesia5dAhgQeDZ1U6Rt5D
0KZKlRomSZzVjCDLaXdDYQcX7WKIJEZYntncatEB2td+HMh8IYnjU16SgX1t
8EG+4b++t5JY2szJvGjfCr8e+3gr/ZNE1eq6M49uN4GUa8ftX75HkX+Af4BB
rRbe8iab80cfxSxm//TYtWow6Q7mJucexcyOM/FEcxW4KYukZs8exUO8W6VT
F8vh0u/LRd/ppZA38WL7mbpS0CZNczPskUK2nyYO4q+K4cOWmhE5WSl8tJZW
apSeD4+tJbSNNKRw30GOZbvWPLAvepBqT5bC7t1VzD8258K8i6dnlKcUZg8U
HZU7nQGldX3daZek8GTDqHyYWSpc49VRqL4jhee3lHyf8EoGtu4Dqz8ypHAx
cmH2qsJzKP/m4LulVAqnz/2KSGd6DE7rmdOcTVJIWtjmcOBPPLBxLtqJ9kjh
RAX2FCvFQLm4Wp/amBSOK4kltzXfByfNMDJ5Xgodnzz6fPhEBLBZtjc5bJLG
YzK/T9nWhEG51x4M2CWN51O63gd0XgGnG9ZFEQc2+EY/7o1tCgTWp8mSz0Sl
ccaJByzTvaEsfzY5T0kaM1i3i8TKO4NTqzxPg440QvZnrRjtk8A6ejHmM0Ua
U+2swiLOGEDpcj3zrJ00amy+w0HfKAWOLLtCNnlLI2vWpd2fiqYJVkHaCsdl
aTxXLrtXsY8DSlWfegvdkca75kOWnt9VwcF8/JvKI2n8XGKWeFPIDFhcJG1N
0qTRbuvktM5fWyi94td7ukgal428hu1NXMEhvtLkfL00hsYTLeZbfIElm6Hh
5ntpjE5K9Ll3N3gj/yZqj0ekkV9h8+k4/mvg8CUuP+eHNHJ3+XI8YrsBLPOD
YrWr0ngnbn1ZNeo2lDIKvexhlsFje+on+MmR4MDnyT21Twb5aDOGuc9igEWh
KHJVSAYDnL8fjpJ9AKVG64xsCjIo8u6o+hXmx+Bgr3tFQEsGP936FbOb4zmw
BN1bUjSTQc+Kf+Wc6ong8Ipv3MZDBpUkhlDnXwrsqnS2PndBBlsjhvIWb6RB
yYecD2HhMvjBK8jdQjoTdtFhbWbKhr5velr/Zl5DsZXt85VBGSxc/7s9VL4I
7HxS9+6alcFq2fMCDuPFsDN87u6hvzIocFzJPCWxFOyKrlzU2yuLKw/TFtyP
VcJO9heWcaayGPhtmZOYq4Fi4cl3aday2Lep+Jjfj1qwA2n9CldZlPF+cOns
fB0Uu1Urjt2QxVzckxBM1wh2jSO7ZapkUUMz4iOHVisUXuDvbJeSw/5VzcGz
27uhx3PpARvKId33GqC87Ibfdm12VFM5fNtm+GFN9T0o6vv97neXwzLp6bY5
jw9QvKeFZyZdDnnvRN8Za+qBT4zPJo6WyuHNxkfrLla98OevT65PsxyOiO8b
P/+9F1RGebT/TshhkdOfrLCdn6Es29uN6Yg81nq8UciU/QL9L3QUTOTkUaJL
/4h30Rf4F7N/U5SmPI6/KU1JUeoH1eD66H128ujUlJ3/TWYArDwSrK295VFQ
co9wacYAXDztKfTiijxmFfVsu35oECp195UJP5PHRY570i+2DMGgyvdQt2x5
3FuIdBWeQ7AmUWvyukIe1X7y0tw+DQHsdh9V7JfH5TX5kRjTYbDdppEZPC2P
2Vm3DK9fGoYrK5x+b1c2+M8OKcZlDEPVcNV23X0KWOd+VX5mfRiG38e+DxdW
QO0Ev+WDG3hoU6PLkw5FBVRa0nxGNhqBg6XgzK6rgIINil/9PEdAPWu3NI2m
gLdnxPeE3x8Bu+eTKw8dFdB5gYcpLGcErkVX1g34KmDsgcijdm0jkHg9+u6h
UAVcLBy4emBiBGoCzxx3jFbY2IcM7+asj8Comxp/WqICWtzb7rOXcxTobNln
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
/3+O/wPJ+RjF
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-90., 0.},
  BaseStyle->{FontFamily -> "Latin Modern Roman", FontSize -> 16},
  DisplayFunction->Identity,
  Frame->{{True, False}, {True, False}},
  FrameLabel->{{
     FormBox["\"relative intensity\"", TraditionalForm], None}, {
     FormBox["\[Theta]", TraditionalForm], None}},
  FrameTicks->{{Automatic, None}, {{{-90, 
       FormBox[
        RowBox[{"-", 
          FractionBox["\[Pi]", "2"]}], TraditionalForm]}, {-45, 
       FormBox[
        RowBox[{"-", 
          FractionBox["\[Pi]", "4"]}], TraditionalForm]}, {0, 
       FormBox["0", TraditionalForm]}, {45, 
       FormBox[
        FractionBox["\[Pi]", "2"], TraditionalForm]}, {90, 
       FormBox[
        FractionBox["\[Pi]", "2"], TraditionalForm]}}, None}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-90, 90}, {0, 1.02}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.751171566612254*^9, {3.7511716504351063`*^9, 3.751171718750353*^9}, 
   3.751171815971203*^9, {3.7511718717918587`*^9, 3.751171921209375*^9}, {
   3.751171992680854*^9, 3.7511720334034967`*^9}, 3.75117280600362*^9, 
   3.751173193095929*^9, {3.75117327107259*^9, 3.7511733201970253`*^9}, {
   3.751173361672852*^9, 3.7511734127597446`*^9}, 3.751173475985581*^9, {
   3.751173527332181*^9, 3.751173544257915*^9}, 3.751173600874544*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "\[LessEqual]", "7"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotDES", "[", "i", "]"}], "=", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"plotDEStheor", ",", 
         RowBox[{"plotDESlist", "[", "i", "]"}]}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Export", "[", 
     RowBox[{
      RowBox[{"\"\<plotDSEsample\>\"", "<>", 
       RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.pdf\>\""}], ",", 
      RowBox[{"plotDES", "[", "i", "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.568358616696344*^9, 3.5683586171586647`*^9}, 
   3.568358650609603*^9, {3.568358714157257*^9, 3.5683588147192373`*^9}, 
   3.568358854785554*^9, {3.568359450945225*^9, 3.568359481585177*^9}, {
   3.5708659882532*^9, 3.5708660056915827`*^9}, {3.751170806413834*^9, 
   3.751170859514701*^9}, {3.751171028741336*^9, 3.751171032967684*^9}, {
   3.751171552929604*^9, 3.751171557798365*^9}, {3.751172040600541*^9, 
   3.7511720593447638`*^9}, {3.751172657044442*^9, 3.7511726890746603`*^9}, 
   3.751172868362638*^9, {3.751173154061426*^9, 3.751173154120118*^9}, {
   3.7511732179607887`*^9, 3.751173218184141*^9}}]
},
WindowSize->{1541, 1176},
WindowMargins->{{Automatic, 457}, {Automatic, 86}},
FrontEndVersion->"10.0 for Linux x86 (64-bit) (December 4, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 255, 5, 32, "Input"],
Cell[CellGroupData[{
Cell[837, 29, 268, 6, 32, "Input",
 CellID->156084050],
Cell[1108, 37, 803, 11, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1948, 53, 214, 4, 32, "Input"],
Cell[CellGroupData[{
Cell[2187, 61, 472, 11, 23, "Print"],
Cell[2662, 74, 112, 1, 23, "Print"],
Cell[2777, 77, 730, 10, 62, "Print"],
Cell[3510, 89, 590, 9, 43, "Print"]
}, Open  ]]
}, Open  ]],
Cell[4127, 102, 840, 24, 32, "Input"],
Cell[4970, 128, 408, 11, 77, "Input"],
Cell[5381, 141, 11150, 284, 1155, "Input"],
Cell[CellGroupData[{
Cell[16556, 429, 754, 19, 99, "Input"],
Cell[CellGroupData[{
Cell[17335, 452, 149, 2, 23, "Print"],
Cell[17487, 456, 149, 2, 23, "Print"],
Cell[17639, 460, 149, 2, 23, "Print"],
Cell[17791, 464, 149, 2, 23, "Print"],
Cell[17943, 468, 151, 2, 23, "Print"],
Cell[18097, 472, 151, 2, 23, "Print"],
Cell[18251, 476, 151, 2, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[18429, 482, 3023, 79, 253, "Input"],
Cell[CellGroupData[{
Cell[21477, 565, 3763, 97, 231, "Input"],
Cell[25243, 664, 39759, 664, 273, "Output"]
}, Open  ]],
Cell[65017, 1331, 1402, 30, 99, "Input"]
}
]
*)

(* End of internal cache information *)
